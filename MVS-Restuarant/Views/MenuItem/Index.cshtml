@model IEnumerable<MVS_Restuarant.Models.MenuItem>
@{
    ViewData["Title"] = "Menu Management";
}

<head>
    <link href="~/css/menu.css" rel="stylesheet" />
    <!-- Add Bootstrap Icons CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
</head>

<div class="container-fluid py-4">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="fw-bold mb-0">Menu Items Management</h2>
            <p class="text-muted">Manage your restaurant's menu offerings</p>
        </div>
        <div>
            <a asp-action="CreateItem" asp-controller="MenuItem" class="btn btn-success">
                <i class="bi bi-plus-circle me-2"></i>Add New Item
            </a>
        </div>
    </div>

    <!-- Filter/Search Section -->
    <div class="card shadow-sm mb-4">
        <div class="card-body p-3">
            <div class="row g-2">
                <div class="col-md-3">
                    <select id="categoryFilter" class="form-select">
                        <option value="">All Categories</option>
                        @{
                            var categories = Model.Select(i => i.Category).Distinct();
                            foreach (var category in categories)
                            {
                                <option value="@category">@category</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <select id="availabilityFilter" class="form-select">
                        <option value="">All Items</option>
                        <option value="available">Available Only</option>
                        <option value="unavailable">Out of Stock Only</option>
                    </select>
                </div>
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" id="searchInput" class="form-control" placeholder="Search items...">
                        <button class="btn btn-outline-secondary" type="button">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Menu Items Grid -->
    <div class="row g-4" id="menuItemsContainer">
        @foreach (var item in Model)
        {
            <div class="col-xl-3 col-lg-4 col-md-6 menu-item"
                 data-category="@item.Category"
                 data-availability="@(item.IsAvailable ? "available" : "unavailable")">
                <div class="card h-100 shadow-sm border-0 @(item.IsAvailable ? "" : "border-danger border-2")">
                    <div class="position-relative">
                        <!-- Item Image -->
                        <img src="data:@item.ContentType;base64,@(Convert.ToBase64String(item.ImageData))"
                             class="card-img-top" style="height: 200px; object-fit: cover;" alt="@item.ItemName" />

                        <!-- Category Badge -->
                        <span class="position-absolute top-0 start-0 badge bg-dark m-2 px-2 py-1">
                            @item.Category
                        </span>

                        <!-- Availability Badge -->
                        @if (item.IsAvailable)
                        {
                            <span class="position-absolute top-0 end-0 badge bg-success m-2">Available</span>
                        }
                        else
                        {
                            <span class="position-absolute top-0 end-0 badge bg-danger m-2">Out of Stock</span>
                        }
                    </div>

                    <div class="card-body d-flex flex-column">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h5 class="card-title mb-0 fw-bold">@item.ItemName</h5>
                            <span class="fs-5 fw-bold text-primary">R @item.ItemPrice.ToString("0.00")</span>
                        </div>

                        <p class="card-text text-muted small mb-3">@item.ItemDescription</p>

                        <div class="mt-auto">
                            <div class="btn-group w-100" role="group">
                                <a asp-action="Edit" asp-controller="MenuItem" asp-route-id="@item.ItemId"
                                   class="btn btn-outline-primary">
                                    <i class="bi bi-pencil me-1"></i>Edit
                                </a>
                                <a asp-action="Details" asp-controller="MenuItem" asp-route-id="@item.ItemId"
                                   class="btn btn-outline-secondary">
                                    <i class="bi bi-eye me-1"></i>View
                                </a>
                                <button type="button" class="btn btn-outline-danger"
                                        data-bs-toggle="modal" data-bs-target="#deleteModal"
                                        data-id="@item.ItemId" data-name="@item.ItemName">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (!Model.Any())
    {
        <div class="text-center py-5">
            <div class="mb-4">
                <i class="bi bi-database-x" style="font-size: 3rem;"></i>
            </div>
            <h4>No menu items found</h4>
            <p class="text-muted">Add your first menu item to get started</p>
            <a asp-action="Create" asp-controller="MenuItem" class="btn btn-primary mt-2">
                Add Menu Item
            </a>
        </div>
    }
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete <strong id="itemNameToDelete"></strong>?</p>
                <p class="text-danger">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteForm" asp-action="Delete" asp-controller="MenuItem" method="post">
                    <input type="hidden" id="itemIdToDelete" name="id" />
                    <button type="submit" class="btn btn-danger">Delete Item</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    // Initialize Bootstrap icons (if not already included in layout)
    document.addEventListener('DOMContentLoaded', function () {
        // Filter functionality
        const filterItems = () => {
            const category = document.getElementById('categoryFilter').value;
            const availability = document.getElementById('availabilityFilter').value;
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();

            document.querySelectorAll('.menu-item').forEach(item => {
                const itemCategory = item.dataset.category;
                const itemAvailability = item.dataset.availability;
                const itemName = item.querySelector('.card-title').textContent.toLowerCase();
                const itemDescription = item.querySelector('.card-text').textContent.toLowerCase();

                const matchesCategory = !category || itemCategory === category;
                const matchesAvailability = !availability || itemAvailability === availability;
                const matchesSearch = !searchTerm ||
                    itemName.includes(searchTerm) ||
                    itemDescription.includes(searchTerm);

                if (matchesCategory && matchesAvailability && matchesSearch) {
                    item.style.display = '';
                } else {
                    item.style.display = 'none';
                }
            });
        };

        // Add event listeners
        document.getElementById('categoryFilter').addEventListener('change', filterItems);
        document.getElementById('availabilityFilter').addEventListener('change', filterItems);
        document.getElementById('searchInput').addEventListener('input', filterItems);

        // Delete modal
        const deleteModal = document.getElementById('deleteModal');
        if (deleteModal) {
            deleteModal.addEventListener('show.bs.modal', function (event) {
                const button = event.relatedTarget;
                const itemId = button.getAttribute('data-id');
                const itemName = button.getAttribute('data-name');

                document.getElementById('itemIdToDelete').value = itemId;
                document.getElementById('itemNameToDelete').textContent = itemName;
            });
        }
    });
</script>